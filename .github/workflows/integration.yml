name: Integration tests

on: [push, pull_request]

jobs:
  Integration:
    runs-on: ubuntu-latest
    # if: github.event_name != 'push' || github.repository == 'DIRACGrid/DIRAC'
    timeout-minutes: 45

    env:
      MATRIX_DEFAULT_MYSQL_VER: 8.0
      MATRIX_DEFAULT_HOST_OS: cc7
      MATRIX_DEFAULT_ES_VER: 7.9.1
      MATRIX_DEFAULT_USE_NEWTHREADPOOL: default
      MATRIX_DEFAULT_DIRACOSVER: default
      MATRIX_DEFAULT_TEST_HTTPS: No
      MATRIX_DEFAULT_SERVER_USE_PYTHON3: No
      MATRIX_DEFAULT_CLIENT_USE_PYTHON3: No

    strategy:
      fail-fast: False
      matrix:
        # TEST_NAME is a dummy variable used to make it easier to read the web interface
        include:
          ###### MySQL versions
          - TEST_NAME: "MySQL 5.7"
            MYSQL_VER: 5.7
          # IMPLICIT: - MYSQL_VER: 8.0
          # ###### ES versions
          - TEST_NAME: "Elasticsearch 6.6.0"
            ES_VER: 6.6.0
          # IMPLICIT: - ES_VER: 7.9.1
          ###### Host OS
          # - TEST_NAME: "SLC 6"
          #   HOST_OS: slc6
          # IMPLICIT: - HOST_OS: cc7
          ###### Thread pool
          # IMPLICIT: - USE_NEWTHREADPOOL: default
          - TEST_NAME: "New thread pool"
            USE_NEWTHREADPOOL: No
          ###### HTTPS tests
          # IMPLICIT: - DIRACOSVER: default
          #             TEST_HTTPS: No
          - TEST_NAME: "HTTPS"
            TEST_HTTPS: Yes
            DIRACOSVER: https
          ###### Python 3
          # IMPLICIT: - SERVER_USE_PYTHON3: No
          #             CLIENT_USE_PYTHON3: No
          - TEST_NAME: "Python 3 client"
            CLIENT_USE_PYTHON3: Yes
          - TEST_NAME: "Python 3 server"
            SERVER_USE_PYTHON3: Yes
          - TEST_NAME: "Python 3 server and client"
            CLIENT_USE_PYTHON3: Yes
            SERVER_USE_PYTHON3: Yes
            MYSQL_VER: 8.0

    steps:
    - uses: actions/checkout@v2
    - name: Fail-fast for outdated pipelines
      run: .github/workflows/fail-fast.sh
    - name: Clean up GitHub actions environment
      run: |
        # Prepare wrapper script
        # echo "#!/usr/bin/env bash" >> run_in_container
        # echo "set -euo pipefail" >> run_in_container
        # echo "IFS=\$'\n\t'" >> run_in_container
        # echo -n "exec docker exec -w /repo " >> run_in_container
        # Set environment variables
        echo -n "export HOST_OS=${{ matrix.HOST_OS || env.MATRIX_DEFAULT_HOST_OS }} " >> run_in_container
        echo -n "export CI_PROJECT_DIR=/repo " >> run_in_container
        echo -n "export CI_COMMIT_REF_NAME=$GITHUB_REF " >> run_in_container
        echo -n "export CI_MERGE_REQUEST_TARGET_BRANCH_NAME=$GITHUB_BASE_REF " >> run_in_container
        echo -n "export CI_REGISTRY_IMAGE=diracgrid " >> run_in_container
        echo -n "export MYSQL_VER=${{ matrix.MYSQL_VER || env.MATRIX_DEFAULT_MYSQL_VER }} " >> run_in_container
        echo -n "export ES_VER=${{ matrix.ES_VER || env.MATRIX_DEFAULT_ES_VER }} " >> run_in_container
        if [[ "${{ matrix.USE_NEWTHREADPOOL || env.MATRIX_DEFAULT_USE_NEWTHREADPOOL }}" != "default" ]]; then echo -n "export DIRAC_USE_NEWTHREADPOOL=${{ matrix.USE_NEWTHREADPOOL || env.MATRIX_DEFAULT_USE_NEWTHREADPOOL }} " >> run_in_container; fi
        if [[ "${{ matrix.DIRACOSVER || env.MATRIX_DEFAULT_DIRACOSVER }}" != "default" ]]; then echo -n "export DIRACOSVER=${{ matrix.DIRACOSVER || env.MATRIX_DEFAULT_DIRACOSVER }} " >> run_in_container; fi
        echo -n "export TEST_HTTPS=${{ matrix.TEST_HTTPS || env.MATRIX_DEFAULT_TEST_HTTPS }} " >> run_in_container
        echo -n "export SERVER_USE_PYTHON3=${{ matrix.SERVER_USE_PYTHON3 || env.MATRIX_DEFAULT_SERVER_USE_PYTHON3 }} " >> run_in_container
        if [[ "${{ matrix.SERVER_DIRACOSVER || env.MATRIX_DEFAULT_SERVER_DIRACOSVER }}" != "default" ]]; then echo -n "export SERVER_DIRACOSVER=${{ matrix.SERVER_DIRACOSVER || env.MATRIX_DEFAULT_SERVER_DIRACOSVER }} " >> run_in_container; fi
        echo -n "export CLIENT_USE_PYTHON3=${{ matrix.CLIENT_USE_PYTHON3 || env.MATRIX_DEFAULT_CLIENT_USE_PYTHON3 }} " >> run_in_container
        if [[ "${{ matrix.CLIENT_DIRACOSVER || env.MATRIX_DEFAULT_CLIENT_DIRACOSVER }}" != "default" ]]; then echo -n "export CLIENT_DIRACOSVER=${{ matrix.CLIENT_DIRACOSVER || env.MATRIX_DEFAULT_CLIENT_DIRACOSVER }} " >> run_in_container; fi
        # Finish wrapper script
        # echo -n "dirac-testing-host \"\$@\"" >> run_in_container
        # chmod +x run_in_container
        # Show the run in container script
        echo "Run in container script is"
        cat run_in_container
    - name: Prepare environment
      run: |
        bash -c 'source run_in_container && source tests/CI/run_docker_setup.sh && prepareEnvironment'
    - name: Install server
      run: bash -c 'source run_in_container && source tests/CI/run_docker_setup.sh && installServer'
    - name: Install client
      run: bash -c 'source run_in_container && source tests/CI/run_docker_setup.sh && installClient'
    - name: Server tests
      run: bash -c 'source run_in_container && source tests/CI/run_docker_setup.sh && testServer'
    - name: Client tests
      run: bash -c 'source run_in_container && source tests/CI/run_docker_setup.sh && testClient'
    - name: Elasticsearch logs
      run: bash -c 'source run_in_container && source tests/CI/run_docker_setup.sh && docker logs elasticsearch'
    - name: Check test status
      run: bash -c 'source run_in_container && source tests/CI/run_docker_setup.sh && checkErrors'
